class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int count  = 0;
        
        int m = matrix.size();
        int n =matrix[0].size();
        // crete a dp of same dimensions with 0 filled everywere intially
        vector<vector<int>> dp(m,vector<int>(n,0));
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                //if either i or j is 0 that is we are on left edge or top edge then fill dp with value at that cell either 0 or 1
                if(i==0 || j==0)
                {
                    dp[i][j] = matrix[i][j];
                }
                // else if we get a 1 then we try formi ng a square and test for 1 or 0
                else if(matrix[i][j] == 1)
                {
                    dp[i][j] = min(dp[i-1][j] ,min(dp[i-1][j-1],dp[i][j-1])) + 1;
                }
                //whatever the dp value adds to count
                count  = count+dp[i][j];
            }
        }
        
        return count;
    }
};
