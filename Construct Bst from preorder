/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//Iterative approach O(n) 4ms

class Solution {
public:
TreeNode* bstFromPreorder(vector<int>& preorder) {
if(preorder.size()==0) // base case
return NULL;

    TreeNode* root = new TreeNode(preorder[0]); // since both in preorder and in a bst the first node is the root node
    
    for(int i = 1; i < preorder.size() ; i++)
    {
        bool done = false;
        TreeNode* current = root;
        
        while(!done)
        {
            if(current->val > preorder[i])
            {
                if(!current->left)
                { //no left child
                    current->left = new TreeNode(preorder[i]);
                    done = true;
                }
                else //if there is a left child ..go to child's left
                    current = current->left;
            }
            else{
                if(!current->right){ // no right child
                    current->right = new TreeNode(preorder[i]);
                    done = true;
                }
                else//if ther is right child ..go to childs right
                    current = current->right;
            }
        }
    }
    return root;
}
};



// recursive approach 8ms

/*
class Solution {
public:
    TreeNode* insert(TreeNode* root , int data)
    {
        if(root == NULL)
           return new TreeNode(data);
        
        if(data < root->val)
            root->left = insert(root->left , data);
        else
            root->right = insert(root->right,data);
            
        return root;
    }  
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        
        TreeNode* root = NULL;
        
        for(int i=0;i<preorder.size();i++)
        {
          root = insert(root , preorder[i]);
        }
        
        return root;
    }
};*/
