class Solution {
public:
    //classic dp problem
    //when character match copy diagonal element
    //if character does not match change value to 1 + min(lft ,top,diagonal)
    int minDistance(string word1, string word2) {
        int m = word1.length();
        int n = word2.length();
        
        //create dp matrix
        
        int dp[m+1][n+1];
       
        //base case for 0,0 row and column
        
        for(int i=0;i<=m;i++)
        {
            dp[i][0] = i;
        }
        for(int j=0;j<=n;j++)
        {
            dp[0][j] = j;
        }
        
        //main logic
        
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(word1[i-1] == word2[j-1])
                    dp[i][j] = dp[i-1][j-1];
                else
                {
                    int temp = min(dp[i-1][j-1] , dp[i-1][j]);
                    dp[i][j] = 1 + min(dp[i][j-1] , temp);
                }
            }
        }
        return dp[m][n];
        
    }
};
